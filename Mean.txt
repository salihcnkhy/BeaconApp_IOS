//Rextester.Program.Main is the entry point for your code. Don't change it.
//Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5

using System;

namespace Rextester
{
   public class Program
{
    public enum MeanType {
         AritmeticAndHarmonic,
         AritmeticAndGeometric,
         GeometricAndHarmonic
    }
    
    
    public static void Main(string[] args)
    {
        int typeInt;
        Console.WriteLine("1.Aritmetik ve Geometrik Ortalama");

        Console.WriteLine("2.Aritmetik ve Harmonik Ortalama");

        Console.WriteLine("3.Geometrik ve Harmonik Ortalama");
        Console.Write("İşlem Seçiniz : ");
        typeInt = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("Sırası ile x,y,iterasyon sayılarını sırası ile sadece virgül koyarak giriniz");
        string[] xyi = Console.ReadLine().ToString().Split(',');
        
        MeanType type;
        switch(typeInt){
               case 1:
                type = MeanType.AritmeticAndGeometric;
                break;
            case 2:
                type = MeanType.AritmeticAndHarmonic;
                break;
            case 3:
                type = MeanType.GeometricAndHarmonic;
                break;
              default:
                type = MeanType.AritmeticAndGeometric;
                Console.WriteLine("İşlem otomatik olarak 1 seçildi");
                break;
        }
        
        Console.WriteLine(getMean(Convert.ToDouble(xyi[0]),Convert.ToDouble(xyi[1]),MeanType.GeometricAndHarmonic,Convert.ToInt32(xyi[2])));
        

    }
    private static double aritmeticMean(double x, double y){
        return (x+y)/2f;
    }
    private static double geometricMean(double x, double y){
        return Math.Sqrt(x*y);
    }
    private static double harmonicMean(double x, double y){
        return 2f/((1/x)+(1/y));
    }
    public static (double , double) getMean(double x , double y , MeanType type, int iterationCount = 1){
        int count = 0;
        (double x , double y) results = (x,y);
        while(count != iterationCount){
        count++;
        switch(type){
            case MeanType.AritmeticAndGeometric:
                    if(count == 1){
                        results = (aritmeticMean(results.x,results.y),geometricMean(results.x,results.y));
                    }else{
                        results = (aritmeticMean(results.x,results.y), geometricMean(results.x,results.y));
                    }
                break;
            case MeanType.AritmeticAndHarmonic:
                    if(count == 1){
                        results = (aritmeticMean(results.x,results.y),harmonicMean(results.x,results.y));
                    }else{
                        results = (aritmeticMean(results.x,results.y), harmonicMean(results.x,results.y));
                    }
                break;
            case MeanType.GeometricAndHarmonic:
                    if(count == 1){
                        results = (geometricMean(results.x,results.y),harmonicMean(results.x,results.y));
                    }else{
                        results = (geometricMean(results.x,results.y), harmonicMean(results.x,results.y));
                    }
                break;
        }
        }
        return results;
    }
    
}
}

